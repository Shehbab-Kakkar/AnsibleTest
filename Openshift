ovs-subnet
ovs-multitenant
ovs-networkpolicy- allow administrator to defines its own policies
each pod in the container has its own ip address
container in the pod behave as if they all are on the same host
To access pod services are used
services implemented round robin to access the pods. service also allow replicated pods to communicate to one another.
services use a selector attribute to connect to pods
each pods matching the selectors added to the service resource as an endpoint.
Pods as well as service ip address cannot be reached from outside the cluster.
OpenShift routes allow network access to pods from outside the openshift environment.
A dedicated router pod is used to load-balanc traffic between the target Pods
The router pods uses HAProxy and can be scaled itself
The router exposes a public facing ipaddress and dns hostname to the internal pod networking
Routers connect directory to the pods, the service is used for pod lookup only but not
involved in the actual traffic flow

Create Routes

Use oc expose service my-app --name my-app [--hostname=my-app.apps.example.com]
oc create combined with a yaml or json file
oc new-app command do not create a route
oc delete route to un-expose a service
The default routing subdomain is set in the master-config.yaml openshift configuration file
routingConfig:
subdomain: router.default.svc.cluster.local

Route must be able to bind to the port 80 and 443 do not run a router on a host that already uses these ports for something else.

kubens myspace
kubectl get pv --all-namespaces
kubectl get pvc --all-namespaces
---------
Kubernetes crd(custom resource defination)
#kubectl get crds
#kubectl api-resources
#kubenvs namespace-name

Envoy Proxy - Pilot - Mixer(Telemetory,proxy) - citadel
HTTP1.1/1.2/gRPC/TCP TLS 

kubectl get crds
kubectl api-resources | grep istio
Destinationrules
Virtualservices
Gateway
Haproxy
Nginx
Openshift
kubectl get pods --show-labels
kubectl edit vs/recommendation

   
