kubectl create ns development
openssl genrsa -out dev1.key 2048
openssl req -new -key dev1.key -out dev1.csr -subj "/CN=dev1/0=developers"
openssl x509 -req -in dev1.csr -CA /etc/kubernetes/pki/ca.crt  -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out dev1.crt -days 500
mkdir -p ~/.certs
mv dev1* ~/.certs/
vim ~/.kube/config

# We can add more context in the config file

kubectl config set-credentials dev1 --client-certifcate=dev1.crt --client-key=dev1.key

now make the context and bind the user to actual cluster

kubectl config set-context dev1-context --cluster=kubernetes --namespace=development --user=dev1

kubectl --context=dev1-context get pods 

Permission is fobidden. user will not do anything he do have permission to login but 
can't do anything
kubectl create ns development
_______________________________________________________________________________}
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
   namespace: development
   name: developer
rules:
- apiGroups: ["","extensions","apps"]
  resources: ["deployments","replicasets","pods"]
  verbs: ["get","list","watch","create","update","patch","delete"]

kubectl create -f dev1-role.yaml
_______________________________________________________________________________}
kind: RoleBinding
apiVersion: rbac.authorization.k8.io/v1beta1
metadata: 
   name: developer-binding
   namespace: development
subjects:
- kind: User
  name: dev1
  apiGroup: ""
roleRef:
   kind: Role
   name: developer
   apiGroup: ""


kubectl create -f dev1-roloebinding.yaml
________________________________________________________________________________}
 
kubectl --context=dev1-context get pods
kubectl --context=dev1-context create -f ngx.yaml
 
